---
openapi: 3.0.1
info:
  title: API V1
  version: v1
  description: API for managing users, movies, and subscriptions
paths:
  "/users":
    post:
      summary: User registration
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
                    enum: [user, supervisor]
                  token:
                    type: string
        '422':
          description: Invalid registration request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    mobile_number:
                      type: string
                  required:
                  - name
                  - email
                  - password
                  - mobile_number
              required:
              - user
  "/users/sign_in":
    post:
      summary: User login
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              examples:
                success:
                  value:
                    id: 1
                    email: user@example.com
                    role: user
                    token: some_jwt_token_here
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
                    enum: [user, supervisor]
                  token:
                    type: string
        '401':
          description: Unauthorized login attempt
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid email or password
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                  required:
                  - email
                  - password
              required:
              - user
  "/users/sign_out":
    delete:
      summary: User logout
      tags:
      - Authentication
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signed out successfully."
        '401':
          description: Unauthorized or invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired token"
  "/api/v1/current_user":
    get:
      summary: Fetch current user
      tags:
      - Users
      security:
      - BearerAuth: []
      responses:
        '200':
          description: User details returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  mobile_number:
                    type: string
                  role:
                    type: string
                    enum: [user, supervisor]
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/update_device_token":
    post:
      summary: Update user device token
      tags:
      - Users
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device_token:
                  type: string
              required:
              - device_token
      responses:
        '200':
          description: Device token updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Device token updated successfully"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/toggle_notifications":
    post:
      summary: Toggle user notifications
      tags:
      - Users
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notifications_enabled:
                  type: boolean
              required:
              - notifications_enabled
      responses:
        '200':
          description: Notification preference updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Notification preference updated"
                  notifications_enabled:
                    type: boolean
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/movies":
    get:
      summary: List movies
      tags:
      - Movies
      parameters:
      - name: title
        in: query
        description: Filter movies by title (case-insensitive)
        required: false
        schema:
          type: string
      - name: genre
        in: query
        description: Filter movies by genre
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Page number for pagination
        required: false
        schema:
          type: integer
          default: 1
      - name: per_page
        in: query
        description: Number of movies per page
        required: false
        schema:
          type: integer
          default: 10
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
        '404':
          description: No movies found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No movies found"
    post:
      summary: Create a new movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[genre]:
                  type: string
                  description: Genre of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[main_lead]:
                  type: string
                  description: Main lead actor/actress of the movie
                movie[streaming_platform]:
                  type: string
                  description: Streaming platform (Amazon, Netflix, Hulu, Disney+, HBO)
                  enum: ["Amazon", "Netflix", "Hulu", "Disney+", "HBO"]
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
              required:
              - movie[title]
              - movie[genre]
              - movie[release_year]
              - movie[director]
              - movie[duration]
              - movie[description]
              - movie[main_lead]
              - movie[streaming_platform]
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added successfully"
                  movie:
                    $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden: Supervisor access required"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
  "/api/v1/movies/{id}":
    get:
      summary: Fetch a movie by ID
      tags:
      - Movies
      parameters:
      - name: id
        in: path
        description: ID of the movie
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
    patch:
      summary: Update a movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to update
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movie[title]:
                  type: string
                  description: Title of the movie
                movie[genre]:
                  type: string
                  description: Genre of the movie
                movie[release_year]:
                  type: integer
                  description: Release year of the movie
                movie[rating]:
                  type: number
                  format: float
                  description: Rating of the movie (0 to 10)
                movie[director]:
                  type: string
                  description: Director of the movie
                movie[duration]:
                  type: integer
                  description: Duration of the movie in minutes
                movie[description]:
                  type: string
                  description: Description of the movie (max 1000 characters)
                movie[main_lead]:
                  type: string
                  description: Main lead actor/actress of the movie
                movie[streaming_platform]:
                  type: string
                  description: Streaming platform (Amazon, Netflix, Hulu, Disney+, HBO)
                  enum: ["Amazon", "Netflix", "Hulu", "Disney+", "HBO"]
                movie[premium]:
                  type: boolean
                  description: Whether the movie is premium
                movie[poster]:
                  type: string
                  format: binary
                  description: Poster image file (JPEG or PNG)
                movie[banner]:
                  type: string
                  format: binary
                  description: Banner image file (JPEG or PNG)
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden: Supervisor access required"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
    delete:
      summary: Delete a movie
      tags:
      - Movies
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the movie to delete
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
        '403':
          description: Forbidden - Supervisor access required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden: Supervisor access required"
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Movie not found"
  "/api/v1/subscriptions":
    post:
      summary: Create a subscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_type:
                  type: string
                  enum: ["1_day", "7_days", "1_month"]
              required:
              - plan_type
      responses:
        '200':
          description: Subscription session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  url:
                    type: string
        '400':
          description: Invalid plan type
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid plan type"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
  "/api/v1/subscriptions/success":
    get:
      summary: Handle successful subscription payment
      tags:
      - Subscriptions
      parameters:
      - name: session_id
        in: query
        description: Stripe checkout session ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription updated successfully"
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Subscription not found"
  "/api/v1/subscriptions/status":
    get:
      summary: Check subscription status
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Subscription status returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan_type:
                    type: string
                    enum: ["basic", "premium"]
                  message:
                    type: string
                    example: "Your subscription has expired. Downgrading to basic plan."
                    nullable: true
        '404':
          description: No active subscription found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No active subscription found"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
    get:
      summary: Fetch current user's subscription
      tags:
      - Subscriptions
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Subscription details returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription:
                    $ref: '#/components/schemas/Subscription'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No token provided. Please sign in."
servers:
- url: http://localhost:3000
  description: Local server
- url: https://movie-explorer-ror-abhinav.onrender.com
  description: Production server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        genre:
          type: string
        release_year:
          type: integer
        rating:
          type: number
          format: float
        director:
          type: string
        duration:
          type: integer
        description:
          type: string
        main_lead:
          type: string
        streaming_platform:
          type: string
        premium:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - title
      - genre
      - release_year
      - director
      - duration
      - description
      - main_lead
      - streaming_platform
    Subscription:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        plan_type:
          type: string
          enum: ["basic", "premium"]
        status:
          type: string
          enum: ["active", "inactive", "cancelled"]
        stripe_customer_id:
          type: string
          nullable: true
        stripe_subscription_id:
          type: string
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - user_id
      - plan_type
      - status